import Mathlib
/-! Question:
Prove that $A_n$ is the unique subgroup of index 2 in $S_n$
-/

namespace Exercise_20240727_03

open Subgroup Group Equiv Equiv.Perm Fintype

variable (α : Type*) [Fintype α] [DecidableEq α]

/-- The alternating group is the only subgroup of index 2 of the permutation group.
That is, if $G$ is a subgroup of the permutation group $\operatorname{Perm}(\alpha)$ with index 2, then $G$ is the alternating group $\operatorname{Alt}(\alpha)$.
-/
theorem eq_alternatingGroup_of_index_eq_two {G : Subgroup (Equiv.Perm α)} (hG : G.index = 2) :
    G = alternatingGroup α := by
  nontriviality α
  -- Since $G$ has index 2 in $\operatorname{Perm}(\alpha)$, it is a proper subgroup.
  -- We want to show that there exists a transposition (swap) that is not in $G$.
  obtain ⟨_, ⟨a, b, hab, rfl⟩, habG⟩ : ∃ g : Perm α, g.IsSwap ∧ g ∉ G := by
    -- We prove this by contradiction. Assume that every transposition is in $G$.
    by_contra! h
    -- If every transposition is in $G$, then the subgroup $G$ contains all transpositions.
    -- Since the permutation group $\operatorname{Perm}(\alpha)$ is generated by transpositions, $G$ must be the entire permutation group $\operatorname{Perm}(\alpha)$.
    suffices G = ⊤ by rw [this, Subgroup.index_top] at hG; cases hG
    -- We show that if every transposition is in $G$, then $G = \top = \operatorname{Perm}(\alpha)$.
    -- `eq_top_iff` means $G = \top$ if and only if $\top \le G$. Since $G \le \top$ is always true, we only need to show $\top \le G$.
    -- `closure_isSwap` is the closure of all swaps is the top subgroup, i.e., $\operatorname{Perm}(\alpha) = \langle \{\text{swaps}\} \rangle$.
    -- `G.closure_le` means if all swaps are in $G$, then the closure of swaps is also in $G$, i.e., $\langle \{\text{swaps}\} \rangle \le G$.
    rwa [eq_top_iff, ← closure_isSwap, G.closure_le]
  -- Now we have a transposition $g$ that is not in $G$.
  -- To show $G = \operatorname{Alt}(\alpha)$, we prove $G \le \operatorname{Alt}(\alpha)$ and $\operatorname{Alt}(\alpha) \le G$ by showing they have the same elements.
  ext g
  -- We use swap induction on $g \in \operatorname{Perm}(\alpha)$.
  -- The base case is the identity permutation, which is in both $G$ and $\operatorname{Alt}(\alpha)$.
  -- The inductive step is to show that if $g \cdot \operatorname{swap} (x, y)$ is in $G$ if and only if it is in $\operatorname{Alt}(\alpha)$, assuming $g$ satisfies the condition.
  refine swap_induction_on g (iff_of_true G.one_mem <| map_one _) fun g x y hxy ih ↦ ?_
  -- We want to show $g \in G \iff g \in \operatorname{Alt}(\alpha)$.
  -- By swap induction, we assume we know the result for $g$, and we want to show for $g \cdot \operatorname{swap} (x, y)$.
  -- We need to show $(g * \operatorname{swap} (x, y)) \in G \iff (g * \operatorname{swap} (x, y)) \in \operatorname{Alt}(\alpha)$.
  -- By `mul_mem_iff_of_index_two hG`, for subgroup $G$ of index 2, $g_1 \cdot g_2 \in G \iff (g_1 \in G \iff g_2 \in G)$.
  -- Similarly, for alternating group $\operatorname{Alt}(\alpha)$, $g_1 \cdot g_2 \in \operatorname{Alt}(\alpha) \iff (g_1 \in \operatorname{Alt}(\alpha) \iff g_2 \in \operatorname{Alt}(\alpha))$ because $\operatorname{Alt}(\alpha)$ has index 2.
  -- And we have inductive hypothesis $g \in G \iff g \in \operatorname{Alt}(\alpha)$, i.e., `ih`.
  rw [mul_mem_iff_of_index_two hG, mul_mem_iff_of_index_two alternatingGroup.index_eq_two, ih]
  -- We need to show $\operatorname{swap} (x, y) \
otin G \iff \operatorname{swap} (x, y) \
otin \operatorname{Alt}(\alpha)$.
  -- We want to prove $\operatorname{swap} (x, y) \
otin G \iff \operatorname{swap} (x, y) \
otin \operatorname{Alt}(\alpha)$.
  -- `iff_congr Iff.rfl` means we need to show $\operatorname{swap} (x, y) \
otin G \iff \operatorname{swap} (x, y) \
otin \operatorname{Alt}(\alpha)$.
  refine iff_congr (iff_of_false ?_ (by cases (sign_swap hxy).symm.trans ·)) Iff.rfl
  -- To show $\operatorname{swap} (x, y) \
otin \operatorname{Alt}(\alpha)$, we use the sign of a transposition.
  -- `sign_swap hxy` states that the sign of a transposition is -1, which is not 1 in $\mathbb{Z}/2\mathbb{Z}$.
  -- Thus $\operatorname{swap} (x, y) \
otin \operatorname{Alt}(\alpha)$ because $\operatorname{Alt}(\alpha)$ consists of permutations with sign 1.
  -- Now we need to show $\operatorname{swap} (x, y) \
otin G$.
  -- We assume $\operatorname{swap} (x, y) \in G$ for contradiction.
  contrapose! habG
  -- Assume $\operatorname{swap} (x, y) \in G$, we want to show contradiction with $habG : g \
otin G$ for some swap $g$.
  -- We know there exists a swap $g \
otin G$. We want to show $\operatorname{swap} (x, y) \
otin G$ leads to contradiction with $habG$.
  -- Since all transpositions are conjugate to each other in $\operatorname{Perm}(\alpha)$.
  -- `isConj_swap hxy hab` states that $\operatorname{swap} (x, y)$ is conjugate to $\operatorname{swap} (a, b)$ because both are transpositions.
  -- `isConj_iff.mp` converts the `IsConj` predicate to an existential witness of conjugation.
  -- Thus there exists $h$ such that $\operatorname{swap} (x, y) = h \cdot \operatorname{swap} (a, b) \cdot h^{-1}$.
  rw [← (isConj_iff.mp <| isConj_swap hxy hab).choose_spec]
  -- Since $G$ is a normal subgroup because it has index 2 (by `normal_of_index_eq_two hG`).
  -- If $G$ is normal, then for any $g \in G$ and $h \in \operatorname{Perm}(\alpha)$, $h \cdot g \cdot h^{-1} \in G$.
  -- We have $\operatorname{swap} (a, b) \
otin G$ (i.e., $habG$) and $\operatorname{swap} (x, y) = h \cdot \operatorname{swap} (a, b) \cdot h^{-1}$.
  -- By normality of $G$, if $\operatorname{swap} (a, b) \
otin G$, then $\operatorname{swap} (x, y) = h \cdot \operatorname{swap} (a, b) \cdot h^{-1} \
otin G$.
  exact (normal_of_index_eq_two hG).conj_mem _ habG _
  -- `normal_of_index_eq_two hG` shows that $G$ is a normal subgroup because its index is 2.
  -- `(normal_of_index_eq_two hG).conj_mem _ habG _` states that if $N$ is a normal subgroup, $x \
otin N$, then $h \cdot x \cdot h^{-1} \
otin N$.
  -- Here $N = G$, $x = \operatorname{swap} (a, b)$, $h = h$. Since $\operatorname{swap} (a, b) \
otin G$, we have $\operatorname{swap} (x, y) = h \cdot \operatorname{swap} (a, b) \cdot h^{-1} \
otin G$.

end Exercise_20240727_03

/-! Informal proof:
ESS","data":{"total":1,"list":[{"created":"2025-03-10 09:12:36","updated":"2025-03-10 22:00:14","id":6058,"questionId":7445,"taskId":2447,"jobId":4835,"userId":211,"judgeUserId":213,"answer":{"informalProof":null,"formalProof":"import Mathlib
namespace Exercise_20240727_03
open Subgroup Group Equiv Equiv.Perm Fintype
variable (α : Type*) [Fintype α] [DecidableEq α]
/-- The alternating group is the only subgroup of index 2 of the permutation group.
That is, if $G$ is a subgroup of the permutation group $\operatorname{Perm}(\alpha)$ with index 2, then $G$ is the alternating group $\operatorname{Alt}(\alpha)$.
-/
theorem eq_alternatingGroup_of_index_eq_two {G : Subgroup (Equiv.Perm α)} (hG : G.index = 2) :
    G = alternatingGroup α := by
  nontriviality α
  -- Since $G$ has index 2 in $\operatorname{Perm}(\alpha)$, it is a proper subgroup.
  -- We want to show that there exists a transposition (swap) that is not in $G$.
  obtain ⟨_, ⟨a, b, hab, rfl⟩, habG⟩ : ∃ g : Perm α, g.IsSwap ∧ g ∉ G := by
    -- We prove this by contradiction. Assume that every transposition is in $G$.
    by_contra! h
    -- If every transposition is in $G$, then the subgroup $G$ contains all transpositions.
    -- Since the permutation group $\operatorname{Perm}(\alpha)$ is generated by transpositions, $G$ must be the entire permutation group $\operatorname{Perm}(\alpha)$.
    suffices G = ⊤ by rw [this, Subgroup.index_top] at hG; cases hG
    -- We show that if every transposition is in $G$, then $G = \top = \operatorname{Perm}(\alpha)$.
    -- `eq_top_iff` means $G = \top$ if and only if $\top \le G$. Since $G \le \top$ is always true, we only need to show $\top \le G$.
    -- `closure_isSwap` is the closure of all swaps is the top subgroup, i.e., $\operatorname{Perm}(\alpha) = \langle \{\text{swaps}\} \rangle$.
    -- `G.closure_le` means if all swaps are in $G$, then the closure of swaps is also in $G$, i.e., $\langle \{\text{swaps}\} \rangle \le G$.
    rwa [eq_top_iff, ← closure_isSwap, G.closure_le]
  -- Now we have a transposition $g$ that is not in $G$.
  -- To show $G = \operatorname{Alt}(\alpha)$, we prove $G \le \operatorname{Alt}(\alpha)$ and $\operatorname{Alt}(\alpha) \le G$ by showing they have the same elements.
  ext g
  -- We use swap induction on $g \in \operatorname{Perm}(\alpha)$.
  -- The base case is the identity permutation, which is in both $G$ and $\operatorname{Alt}(\alpha)$.
  -- The inductive step is to show that if $g \cdot \operatorname{swap} (x, y)$ is in $G$ if and only if it is in $\operatorname{Alt}(\alpha)$, assuming $g$ satisfies the condition.
  refine swap_induction_on g (iff_of_true G.one_mem <| map_one _) fun g x y hxy ih ↦ ?_
  -- We want to show $g \in G \iff g \in \operatorname{Alt}(\alpha)$.
  -- By swap induction, we assume we know the result for $g$, and we want to show for $g \cdot \operatorname{swap} (x, y)$.
  -- We need to show $(g * \operatorname{swap} (x, y)) \in G \iff (g * \operatorname{swap} (x, y)) \in \operatorname{Alt}(\alpha)$.
  -- By `mul_mem_iff_of_index_two hG`, for subgroup $G$ of index 2, $g_1 \cdot g_2 \in G \iff (g_1 \in G \iff g_2 \in G)$.
  -- Similarly, for alternating group $\operatorname{Alt}(\alpha)$, $g_1 \cdot g_2 \in \operatorname{Alt}(\alpha) \iff (g_1 \in \operatorname{Alt}(\alpha) \iff g_2 \in \operatorname{Alt}(\alpha))$ because $\operatorname{Alt}(\alpha)$ has index 2.
  -- And we have inductive hypothesis $g \in G \iff g \in \operatorname{Alt}(\alpha)$, i.e., `ih`.
  rw [mul_mem_iff_of_index_two hG, mul_mem_iff_of_index_two alternatingGroup.index_eq_two, ih]
  -- We need to show $\operatorname{swap} (x, y) \
otin G \iff \operatorname{swap} (x, y) \
otin \operatorname{Alt}(\alpha)$.
  -- We want to prove $\operatorname{swap} (x, y) \
otin G \iff \operatorname{swap} (x, y) \
otin \operatorname{Alt}(\alpha)$.
  -- `iff_congr Iff.rfl` means we need to show $\operatorname{swap} (x, y) \
otin G \iff \operatorname{swap} (x, y) \
otin \operatorname{Alt}(\alpha)$.
  refine iff_congr (iff_of_false ?_ (by cases (sign_swap hxy).symm.trans ·)) Iff.rfl
  -- To show $\operatorname{swap} (x, y) \
otin \operatorname{Alt}(\alpha)$, we use the sign of a transposition.
  -- `sign_swap hxy` states that the sign of a transposition is -1, which is not 1 in $\mathbb{Z}/2\mathbb{Z}$.
  -- Thus $\operatorname{swap} (x, y) \
otin \operatorname{Alt}(\alpha)$ because $\operatorname{Alt}(\alpha)$ consists of permutations with sign 1.
  -- Now we need to show $\operatorname{swap} (x, y) \
otin G$.
  -- We assume $\operatorname{swap} (x, y) \in G$ for contradiction.
  contrapose! habG
  -- Assume $\operatorname{swap} (x, y) \in G$, we want to show contradiction with $habG : g \
otin G$ for some swap $g$.
  -- We know there exists a swap $g \
otin G$. We want to show $\operatorname{swap} (x, y) \
otin G$ leads to contradiction with $habG$.
  -- Since all transpositions are conjugate to each other in $\operatorname{Perm}(\alpha)$.
  -- `isConj_swap hxy hab` states that $\operatorname{swap} (x, y)$ is conjugate to $\operatorname{swap} (a, b)$ because both are transpositions.
  -- `isConj_iff.mp` converts the `IsConj` predicate to an existential witness of conjugation.
  -- Thus there exists $h$ such that $\operatorname{swap} (x, y) = h \cdot \operatorname{swap} (a, b) \cdot h^{-1}$.
  rw [← (isConj_iff.mp <| isConj_swap hxy hab).choose_spec]
  -- Since $G$ is a normal subgroup because it has index 2 (by `normal_of_index_eq_two hG`).
  -- If $G$ is normal, then for any $g \in G$ and $h \in \operatorname{Perm}(\alpha)$, $h \cdot g \cdot h^{-1} \in G$.
  -- We have $\operatorname{swap} (a, b) \
otin G$ (i.e., $habG$) and $\operatorname{swap} (x, y) = h \cdot \operatorname{swap} (a, b) \cdot h^{-1}$.
  -- By normality of $G$, if $\operatorname{swap} (a, b) \
otin G$, then $\operatorname{swap} (x, y) = h \cdot \operatorname{swap} (a, b) \cdot h^{-1} \
otin G$.
  exact (normal_of_index_eq_two hG).conj_mem _ habG _
  -- `normal_of_index_eq_two hG` shows that $G$ is a normal subgroup because its index is 2.
  -- `(normal_of_index_eq_two hG).conj_mem _ habG _` states that if $N$ is a normal subgroup, $x \
otin N$, then $h \cdot x \cdot h^{-1} \
otin N$.
  -- Here $N = G$, $x = \operatorname{swap} (a, b)$, $h = h$. Since $\operatorname{swap} (a, b) \
otin G$, we have $\operatorname{swap} (x, y) = h \cdot \operatorname{swap} (a, b) \cdot h^{-1} \
otin G$.
end Exercise_20240727_03
","formalStatement":null,"suggestion":null,"comment":""},"judgement":{"result":"done","score":5,"suggestion":"<p>Prove smooth, logically rigorous, completely correct, keep up the good work!</p>","feedbackAction":"done","comment":null},"stepInfo":null,"userInfo":{"id":211,"username":"Misaka","nickname":"郑欢誉","avatar":"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp","email":"suzuka@misaka-yu.com"},"judgeUserInfo":{"id":213,"username":"Tristan","nickname":"Tristan","avatar":"//p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/a8c8cdb109cb051163646151a4a5083b.png~tplv-uwbnlip3yd-webp.webp","email":"ct_rabbit_math@163.com"}}]},"errorCode":0
-/
